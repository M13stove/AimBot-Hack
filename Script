local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "ESP & Spectating",
   LoadingTitle = "ESP & Spectating",
   LoadingSubtitle = "by Kanshy_OIO",
   Theme = "Default",
   DisableRayfieldPrompts = false,
   DisableBuildWarnings = true,
   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil,
      FileName = "ESP_Spectating"
   },
   Discord = {
      Enabled = false
   },
   KeySystem = false
})

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera
local RunService = game:GetService("RunService")

local ESPEnabled = false
local Lines = {} -- Store all red lines
local CurrentSpectating = nil -- Currently spectating player

-- Function to draw ESP red lines
local function drawRedLine(player)
    if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        local redLine = Instance.new("Beam")
        local attachmentStart = Instance.new("Attachment", Camera)
        local attachmentEnd = Instance.new("Attachment", player.Character.HumanoidRootPart)
        
        redLine.Attachment0 = attachmentStart
        redLine.Attachment1 = attachmentEnd
        redLine.FaceCamera = true
        redLine.Color = ColorSequence.new(Color3.fromRGB(255, 0, 0)) -- Red line
        redLine.Width0 = 0.1
        redLine.Width1 = 0.1
        redLine.Transparency = NumberSequence.new(0.3) -- Semi-transparent
        redLine.Parent = Camera

        Lines[player] = redLine
    end
end

-- Function to remove all ESP red lines
local function removeESP()
    for _, line in pairs(Lines) do
        line:Destroy()
    end
    Lines = {}
end

-- Function to toggle ESP
local function toggleESP()
    ESPEnabled = not ESPEnabled
    if ESPEnabled then
        for _, player in pairs(Players:GetPlayers()) do
            drawRedLine(player)
        end
    else
        removeESP()
    end
end

-- Function to start spectating a player
local function startSpectating(player)
    if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        CurrentSpectating = player
        Camera.CameraSubject = player.Character.HumanoidRootPart
    end
end

-- Function to stop spectating
local function stopSpectating()
    CurrentSpectating = nil
    Camera.CameraSubject = LocalPlayer.Character.Humanoid
end

-- Spectating buttons
local MainTab = Window:CreateTab("Spectating & ESP", nil)

MainTab:CreateButton({
    Name = "Previous Player",
    Callback = function()
        local players = Players:GetPlayers()
        local index = table.find(players, CurrentSpectating) or 1
        local prevIndex = index - 1
        if prevIndex < 1 then
            prevIndex = #players
        end
        startSpectating(players[prevIndex])
    end
})

MainTab:CreateButton({
    Name = "Next Player",
    Callback = function()
        local players = Players:GetPlayers()
        local index = table.find(players, CurrentSpectating) or 1
        local nextIndex = index + 1
        if nextIndex > #players then
            nextIndex = 1
        end
        startSpectating(players[nextIndex])
    end
})

MainTab:CreateButton({
    Name = "Stop Spectating",
    Callback = function()
        stopSpectating()
    end
})

-- ESP button
MainTab:CreateButton({
    Name = "Toggle ESP",
    Callback = function()
        toggleESP()
    end
})

-- Continuously update ESP positions
RunService.RenderStepped:Connect(function()
    if ESPEnabled then
        for player, line in pairs(Lines) do
            if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                line.Attachment1.Parent = player.Character.HumanoidRootPart
            else
                line:Destroy()
                Lines[player] = nil
            end
        end
    end
end)
