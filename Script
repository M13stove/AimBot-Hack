local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Spectator Hub üëÄ",
   Icon = 0, -- No icon
   LoadingTitle = "Spectator Hub",
   LoadingSubtitle = "by Kanshy_OIO",
   Theme = "Default",
   DisableRayfieldPrompts = false,
   DisableBuildWarnings = true,

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil,
      FileName = "SpectatorHub"
   },

   Discord = {
      Enabled = false,
      Invite = "noinvitelink",
      RememberJoins = true
   },

   KeySystem = false
})

local MainTab = Window:CreateTab("Home üè°", nil)
local MainSection = MainTab:CreateSection("Spectator Controls")

-- Variables for Spectating
local spectating = false
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera

-- Function to find the nearest player
local function getNearestPlayer()
   local nearestPlayer = nil
   local shortestDistance = math.huge -- Set to a very large number

   for _, player in pairs(Players:GetPlayers()) do
      if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Head") then
         local playerHead = player.Character.Head
         local distance = (LocalPlayer.Character.Head.Position - playerHead.Position).Magnitude

         if distance < shortestDistance then
            shortestDistance = distance
            nearestPlayer = player
         end
      end
   end

   return nearestPlayer
end

-- Function to spectate the nearest player
local function spectateNearestPlayer()
   if not spectating then
      Camera.CameraSubject = LocalPlayer.Character -- Reset camera to the local player
      return
   end

   local nearestPlayer = getNearestPlayer()

   if nearestPlayer and nearestPlayer.Character then
      Camera.CameraSubject = nearestPlayer.Character -- Set the camera to follow the nearest player
   else
      Camera.CameraSubject = LocalPlayer.Character -- Reset to the local player if no one is found
   end
end

-- Toggle for Spectating
MainTab:CreateToggle({
   Name = "Enable Spectate",
   CurrentValue = false,
   Callback = function(value)
      spectating = value
      print("Spectating is now", spectating and "Enabled" or "Disabled")
      spectateNearestPlayer()
   end,
})

-- Button to Destroy GUI
MainTab:CreateButton({
   Name = "Destroy GUI",
   Callback = function()
      Rayfield:Destroy()
   end,
})
