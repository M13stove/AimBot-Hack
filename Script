local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Spectator Hub 👀",
   Icon = 0, -- No icon
   LoadingTitle = "Spectator Hub",
   LoadingSubtitle = "by Kanshy_OIO",
   Theme = "Default",
   DisableRayfieldPrompts = false,
   DisableBuildWarnings = true,

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil,
      FileName = "SpectatorHub"
   },

   Discord = {
      Enabled = false,
      Invite = "noinvitelink",
      RememberJoins = true
   },

   KeySystem = false
})

-- Create Main Tab and Section
local MainTab = Window:CreateTab("Home 🏡", nil)
local MainSection = MainTab:CreateSection("Spectator Controls")

-- Variables
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera
local playerList = {} -- List of players for spectating
local currentPlayerIndex = 0 -- Index of the currently spectated player
local spectating = false
local ESPParts = {} -- Table to hold ESP lines for players

-- Function to refresh the list of players
local function refreshPlayerList()
   playerList = {}
   for _, player in pairs(Players:GetPlayers()) do
      if player ~= LocalPlayer then
         table.insert(playerList, player)
      end
   end
end

-- Function to spectate a player based on the index
local function spectatePlayer(index)
   if index > 0 and index <= #playerList then
      local targetPlayer = playerList[index]
      if targetPlayer and targetPlayer.Character then
         Camera.CameraSubject = targetPlayer.Character
         print("Spectating:", targetPlayer.Name)
         spectating = true
         -- Draw ESP red line for the spectated player
         for _, part in pairs(targetPlayer.Character:GetChildren()) do
            if part:IsA("BasePart") then
                local line = Instance.new("Part")
                line.Name = "ESPLine"
                line.Anchored = true
                line.CanCollide = false
                line.Size = Vector3.new(0.1, 0.1, (Camera.CFrame.Position - part.Position).Magnitude)
                line.Position = (Camera.CFrame.Position + part.Position) / 2
                line.Color = Color3.fromRGB(255, 0, 0) -- Red color
                line.Material = Enum.Material.SmoothPlastic
                line.Parent = workspace
                table.insert(ESPParts, line)
            end
         end
      else
         Camera.CameraSubject = LocalPlayer.Character
         print("Player not available, resetting camera.")
         spectating = false
      end
   else
      Camera.CameraSubject = LocalPlayer.Character
      print("Invalid index, resetting camera.")
      spectating = false
   end
end

-- Function to clean up ESP lines
local function clearESP()
   for _, part in pairs(ESPParts) do
      part:Destroy()
   end
   ESPParts = {}
end

-- Button to spectate the next player
MainTab:CreateButton({
   Name = "Next Player ➡️",
   Callback = function()
      refreshPlayerList()
      if #playerList > 0 then
         currentPlayerIndex = currentPlayerIndex + 1
         if currentPlayerIndex > #playerList then
            currentPlayerIndex = 1 -- Loop back to the first player
         end
         spectatePlayer(currentPlayerIndex)
         clearESP() -- Clear previous ESP lines
      else
         print("No players available to spectate.")
      end
   end,
})

-- Button to spectate the previous player
MainTab:CreateButton({
   Name = "⬅️ Previous Player",
   Callback = function()
      refreshPlayerList()
      if #playerList > 0 then
         currentPlayerIndex = currentPlayerIndex - 1
         if currentPlayerIndex < 1 then
            currentPlayerIndex = #playerList -- Loop back to the last player
         end
         spectatePlayer(currentPlayerIndex)
         clearESP() -- Clear previous ESP lines
      else
         print("No players available to spectate.")
      end
   end,
})

-- Stop Spectating Button (Fixed)
MainTab:CreateButton({
   Name = "Stop Spectating 🛑",
   Callback = function()
      -- Reset the camera to the local player
      Camera.CameraSubject = LocalPlayer.Character
      Camera.CFrame = CFrame.new(LocalPlayer.Character.PrimaryPart.Position + Vector3.new(0, 5, 0)) -- Slightly above the local player to avoid overlap
      print("Stopped spectating. Camera reset to local player.")
      spectating = false
      clearESP() -- Clear all ESP lines when stopping spectation
   end,
})

-- Button to Destroy GUI
MainTab:CreateButton({
   Name = "Destroy GUI",
   Callback = function()
      Rayfield:Destroy()
   end,
})

-- Continuously update ESP lines for all players when spectating
game:GetService("RunService").RenderStepped:Connect(function()
   if spectating then
      -- Update the ESP lines for all players
      for _, player in pairs(Players:GetPlayers()) do
         if player.Character and player.Character:FindFirstChild("Head") then
            for _, part in pairs(player.Character:GetChildren()) do
               if part:IsA("BasePart") then
                  -- Find existing ESP line or create a new one
                  local existingLine = workspace:FindFirstChild("ESPLine")
                  if existingLine then
                     existingLine.Position = (Camera.CFrame.Position + part.Position) / 2
                     existingLine.Size = Vector3.new(0.1, 0.1, (Camera.CFrame.Position - part.Position).Magnitude)
                  end
               end
            end
         end
      end
   end
end)
